// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //In the beginning, we pass a bit to the a register.
    //If we are in the context of an A-instruction, we use input value b in the below multiplexer. If in the context of C, we use input value a.
    //(In symbolic Hack, an example of an A-instruction would be @5. For a C-instruction, an example would be A=D.)
    
    Not16(in=instruction, out=flippedInstruction);
    And16(a=instruction, b=flippedInstruction, out=zero);
    Not16(in=zero, out[0]=oneIndividual);
    Not(in=oneIndividual, out=zeroIndividual);
    Not(in=instruction[15], out=Mux16Control);
    Mux16(a=ALUOutputForMux, b=instruction, sel=Mux16Control, out=ARegister);
    
 
    //Do we want to save the value to the a register? We check the relevant instruction d bit that refers to the a register to check. Or, if we have an a-instruction, we want to save to the a register by default.
Not(in=instruction[15], out=AreWeInAnAInstruction);
       Or(a=instruction[5], b=AreWeInAnAInstruction, out=SetA);
    //Note that the 5th position can also be 1 in the context of a C-instruction. Ex: A=D is 111 1001100 010 000. This is because either way, we are wanting to change the a register.
    //We remove the most significant bit in our value sent to addressM, because that first bit is simply the op-code.
    ARegister(in=ARegister, load=SetA, out=MuxARegister, out[0..14]=addressM, out=addressPC);

  
    //If instruction[12] is 0, one of the operands for our ALU will be from A. Otherwise, it will be from inM.
    Mux16(a=MuxARegister, b=inM, sel=instruction[12], out=ToALU);

    //Should we output to m? This is the case if we're dealing with a C-instruction and if one of the destination bits is set to M.
    And(a=instruction[15], b=instruction[3], out=writeM);

    //As you can see below, the other operand for our ALU will always be D. We output to outM.
    ALU(x=DRegister, y=ToALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOutputForD, out=ALUOutputForMux, zr=outputForEqualTo, zr=outputForGreaterOne, ng=outputForLessThan, ng=outputForGreaterTwo);
 
    //Here, we output the result of the ALU to the D register, if the value at instruction[4] is 1 and if we're not in an A-instruction.
    And(a=instruction[4], b=instruction[15], out=writeD);
    DRegister(in=ALUOutputForD, load=writeD, out=DRegister);

//If our value is equal to 0 AND our equal to jump bit is set...
And(a=instruction[1], b=outputForEqualTo, out=checkIfEqual);

//If our value is < 0 AND our <0 jump bit is set...
And(a=instruction[2], b=outputForLessThan, out=checkIfLess);

//Calculate a >0 bit
Or(a=outputForGreaterOne, b=outputForGreaterTwo, out=isLessThanPre);
Not(in=isLessThanPre, out=isGreaterThan);

//If our >0 jump bit is set and our value IS greater than 0
And(a=instruction[0], b=isGreaterThan, out=checkIfGreater);

Or(a=checkIfLess, b=checkIfEqual, out=loadBitPrep);
Or(a=loadBitPrep, b=checkIfGreater, out=loadBitPrepTwo);

//Finally: are we doing an a-instruction or a C-instruction? If it's an A, we simply want our value to increment. If it's C, we either want it incremented or reset.
And(a=loadBitPrepTwo, b=instruction[15], out=loadBit);

    PC(in=addressPC, load=loadBit, inc=oneIndividual, reset=reset, out[0..14]=pc);

}