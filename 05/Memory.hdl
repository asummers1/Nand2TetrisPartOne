// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    //Create zero
    Not(in=load, out=baseZero);
    And(a=load, b=baseZero, out=zeroOne, out=zeroTwo);
    
    //Create one
    Not(in=zeroOne, out=oneOne, out=oneTwo, out=oneThree);
//Suppose address[14] was 1, and address[13] was 0
   Mux4Way16(a=base, b=baseTwo, c=screen, d=keyboard, sel[1]=address[14], sel[0]=address[13], out=out);
//00 and 01 are base, 10 is screen, and 11 is keyboard

//Check if we want to load from RAM. This is the case if the load bit is set, and the given address is part of the RAM range (if address[14] is 0)
Not(in=address[14], out=flippedFourteen);
And(a=flippedFourteen, b=load, out=loadRAM);

//Check if we want to load screen. This is the case if the load bit is set, and address[14] is 1
Not(in=address[13], out=screenValue);
And(a=address[14], b=screenValue, out=loadScreenPre);
And(a=loadScreenPre, b=load, out=loadScreen);

//We never want to load to keyboard; it is read-only.


    RAM16K(in=in, load=loadRAM, address=address[0..13], out=base, out=baseTwo);

    //The screen begins at address 100000000000000 and ends at address 101111111111111. Therefore, to get the address relative to the screen, we need only take the first thirteen bits from the right.
    Screen(in=in, load=loadScreen, address=address[0..12], out=screen);

    Keyboard(out=keyboard);
    
}