// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

  
  
  //----zx and nx values----. If nx, then x is flipped. If zx, x is zeroed. The below block of code does both.
 
//We start by getting the values as *if* zx or nx were true. We actually do the comparison in the Mux4Way16 call.

//If we want to negate it, we need to flip the bits of x.
//If we want to set it to 0, we need to add 1 to that negation and add it to our original value.
//If we want to set it to 0 and negate it, we need to get that 0 value and flip its bits.
//We can keep the value the same, we can set it to 0, we can negate it, or we can set it to zero and negate it.

//The following fulfills the negation aspect.
Not16 (in=x, out=negatedX, out=negateToAdd);

//The following fulfills the zeroing aspect.
Inc16(in=negateToAdd, out=negatedValue);
Add16(a=x, b=negatedValue, out=zero, out=zeroAndNegate);

//The following fulfills the zeroing and negation aspect.
Not16(in=zeroAndNegate, out=one);
Mux4Way16 (a=x, b=zero, c=negatedX, d=one, sel[1]=nx, sel[0]=zx, out=internalX);

//----zy and ny values----
  //If we want to negate it, we need to flip the bits of y.
//If we want to set it to 0, we need to add 1 to that negation and add it to our original value.
//If we want to set it to 0 and negate it, we need to get that 0 value and flip its bits.
//We can keep the value the same, we can set it to 0, we can negate it, or we can set it to zero and negate it.

//The following fulfills the negation aspect.
Not16 (in=y, out=negatedY, out=negateToAddY);

//The following fulfills the zeroing aspect.
Inc16(in=negateToAddY, out=negatedValueY);
Add16(a=y, b=negatedValueY, out=zeroY, out=zeroAndNegateY);

//The following fulfills the zeroing and negation aspect.
Not16(in=zeroY, out=oneY);
Mux4Way16 (a=y, b=zero, c=negatedY, d=oneY, sel[1]=ny, sel[0]=zy, out=internalY);

//----f value----
Add16(a=internalX, b=internalY, out=sumOfXAndY);
And16(a=internalX, b=internalY, out=andOfXAndY);

Mux16(a=andOfXAndY, b=sumOfXAndY, sel=f, out=outNearingEnd);

//The last step for 'out' is checking whether it should be inverted or not!

Not16 (in=outNearingEnd, out=invertedOut);

//Output the value to the standard output bus. We also output it to check if it is == 0, and we output the most significant bit of the value so we check if it is negative or not.

Mux16 (a=outNearingEnd, b=invertedOut, sel=no, out=out, out[0..7]=outEndCompareZrRightHalf, out[8..15]=outEndCompareZrLeftHalf, out[15]=ng);


//We still need to calculate zr:

//Is there at least one one? If so, zr should be false.
Or8Way(in=outEndCompareZrRightHalf, out=isThereAOneInTheRight);
Or8Way(in=outEndCompareZrLeftHalf, out=isThereAOneInTheLeft);
Or(a=isThereAOneInTheRight, b=isThereAOneInTheLeft, out=isThereAOne);
Not(in=isThereAOne, out=zr);
}
